<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--><!-- Note:  A "Server" is not itself a "Container", so you may not
     define subcomponents such as "Valves" at this level.
     Documentation at /docs/config/server.html
 --><Server port="8005" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.startup.VersionLoggerListener"/>
  <!-- Security listener. Documentation at /docs/config/listeners.html
  <Listener className="org.apache.catalina.security.SecurityListener" />
  -->
  <!--APR library loader. Documentation at /docs/apr.html -->
  <Listener SSLEngine="on" className="org.apache.catalina.core.AprLifecycleListener"/>
  <!-- Prevent memory leaks due to use of particular java/javax APIs-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"/>
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener"/>

  <!-- Global JNDI resources
       Documentation at /docs/jndi-resources-howto.html
  -->
  <GlobalNamingResources>
    <!-- Editable user database that can also be used by
         UserDatabaseRealm to authenticate users
    -->
    <Resource auth="Container" description="User database that can be updated and saved" factory="org.apache.catalina.users.MemoryUserDatabaseFactory" name="UserDatabase" pathname="conf/tomcat-users.xml" type="org.apache.catalina.UserDatabase"/>

    <!-- <Resource auth="Container" -->
    <!-- 	      dataSourceFromConfiguration="UCPPoolFromUcpXmlA" -->
    <!-- 	      factory="oracle.ucp.jdbc.PoolDataSourceImpl" -->
    <!-- 	      global="jdbc/UCPPoolFromContextXmlA" -->
    <!-- 	      name="jdbc/UCPPoolFromContextXmlA" -->
    <!-- 	      type="oracle.ucp.jdbc.PoolDataSource" -->
    <!-- 	      /> -->
    
    <!-- Tomcat contains TWO Connection Pool implementations
	 tomcat-jdbc.jar
	 tomcat-dbcp.jar
	 allways use proper factory atribute. Check Tomcat logs, each pooling implementation uses different properties.
    -->
    
    <!-- Use TOMCAT JDBC POOL RATHER THAN APACHE DBCP2 (factory=)
	 https://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html
    -->
    <!-- <Resource auth="Container" -->
    <!-- 	      factory="org.apache.tomcat.jdbc.pool.DataSourceFactory" -->
    <!-- 	      driverClassName="oracle.jdbc.OracleDriver" -->
    <!-- 	      maxActive="20" -->
    <!-- 	      maxAge="90000" -->
    <!-- 	      maxIdle="10" -->
    <!-- 	      maxWait="-1" -->
    <!-- 	      minEvictableIdleTimeMillis="30000" -->
    <!-- 	      name="jdbc/TomcatCP" -->
    <!-- 	      username="ONSTEST" -->
    <!-- 	      password="onstest" -->
    <!-- 	      type="javax.sql.DataSource" -->
    <!-- 	      url="jdbc:oracle:thin:@(DESCRIPTION=(ENABLE=BROKEN)(TRANSPORT_CONNECT_TIMEOUT=90)(RETRY_COUNT=20)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=infra12db-scan)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=ACTEST)))" -->
    <!-- 	      /> -->

    <!-- Use APACHE DBCP2 (factory=)
	 https://commons.apache.org/proper/commons-dbcp/configuration.html
    -->
    <!-- <Resource auth="Container" -->
    <!-- 	      factory="org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory" -->
    <!-- 	      driverClassName="oracle.jdbc.OracleDriver" -->
    <!-- 	      maxTotal="20" -->
    <!-- 	      maxConnLifetimeMillis="90000" -->
    <!-- 	      maxIdle="10" -->
    <!-- 	      minEvictableIdleTimeMillis="30000" -->
    <!-- 	      name="jdbc/DBCP2" -->
    <!-- 	      username="ONSTEST" -->
    <!-- 	      password="onstest" -->
    <!-- 	      type="javax.sql.DataSource" -->
    <!-- 	      url="jdbc:oracle:thin:@(DESCRIPTION=(ENABLE=BROKEN)(TRANSPORT_CONNECT_TIMEOUT=90)(RETRY_COUNT=20)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=infra12db-scan)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=ACTEST)))" -->
    <!-- 	      /> -->

    <!-- Use Hikari
	 https://github.com/brettwooldridge/HikariCP#popular-datasource-class-names
	 On contrary from other connection pool implementations, for Hikari the max lifetime for a connection is limited by default:
	 maxLifetime:
	 This property controls the maximum lifetime of a connection in the pool.
	 An in-use connection will never be retired, only when it is closed will it then be removed.
	 On a connection-by-connection basis, minor negative attenuation is applied to avoid mass-extinction in the pool.
	 We strongly recommend setting this value, and it should be at least 30 seconds less than any database
	 or infrastructure imposed connection time limit.
	 A value of 0 indicates no maximum lifetime (infinite lifetime), subject of course to the idleTimeout setting.
	 Default: 1800000 (30 minutes)
    -->    
    <!-- We recommended using dataSourceClassName instead of jdbcUrl, but either is acceptable. We'll say that again, either is acceptable. -->
    <Resource auth="Container"
	      factory="com.zaxxer.hikari.HikariJNDIFactory"
	      dataSourceClassName="oracle.jdbc.pool.OracleDataSource"
	      name="jdbc/HikariCP"
	      type="javax.sql.DataSource"
	      minimumIdle="5" 
	      maximumPoolSize="20"
	      maxLifetime="90000"
	      dataSource.implicitCachingEnabled="true"
	      dataSource.user="ONSTEST"
	      dataSource.password="onstest"
	      dataSource.url="jdbc:oracle:thin:@(DESCRIPTION=(ENABLE=BROKEN)(TRANSPORT_CONNECT_TIMEOUT=90)(RETRY_COUNT=20)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=infra12db-scan)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=ACTEST)))"
	      />

  </GlobalNamingResources>

  <!-- A "Service" is a collection of one or more "Connectors" that share
       a single "Container" Note:  A "Service" is not itself a "Container",
       so you may not define subcomponents such as "Valves" at this level.
       Documentation at /docs/config/service.html
   -->
  <Service name="Catalina">

    <!--The connectors can use a shared executor, you can define one or more named thread pools-->
    <!--
    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
        maxThreads="150" minSpareThreads="4"/>
    -->


    <!-- A "Connector" represents an endpoint by which requests are received
         and responses are returned. Documentation at :
         Java HTTP Connector: /docs/config/http.html
         Java AJP  Connector: /docs/config/ajp.html
         APR (HTTP/AJP) Connector: /docs/apr.html
         Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
    -->
    <Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/>
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->
    <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443
         This connector uses the NIO implementation with the JSSE engine. When
         using the JSSE engine, the JSSE configuration attributes must be used.
    -->
    <!--
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
               maxThreads="150" SSLEnabled="true">
        <SSLHostConfig>
            <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                         type="RSA" />
        </SSLHostConfig>
    </Connector>
    -->
    <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
         This connector uses the APR/native implementation. When using the
         APR/native implementation or the OpenSSL engine with NIO or NIO2 then
         the OpenSSL configuration attributes must be used.
    -->
    <!--
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
               maxThreads="150" SSLEnabled="true" >
        <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
        <SSLHostConfig>
            <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"
                         certificateFile="conf/localhost-rsa-cert.pem"
                         certificateChainFile="conf/localhost-rsa-chain.pem"
                         type="RSA" />
        </SSLHostConfig>
    </Connector>
    -->

    <!-- Define an AJP 1.3 Connector on port 8009 -->
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443"/>


    <!-- An Engine represents the entry point (within Catalina) that processes
         every request.  The Engine implementation for Tomcat stand alone
         analyzes the HTTP headers included with the request, and passes them
         on to the appropriate Host (virtual host).
         Documentation at /docs/config/engine.html -->

    <!-- You should set jvmRoute to support load-balancing via AJP ie :
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
    -->
    <Engine defaultHost="localhost" name="Catalina">

      <!--For clustering, please take a look at documentation at:
          /docs/cluster-howto.html  (simple how to)
          /docs/config/cluster.html (reference documentation) -->
      <!--
      <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
      -->

      <!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack -->
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key "UserDatabase".  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase"/>
      </Realm>

      <Host appBase="webapps" autoDeploy="true" name="localhost" unpackWARs="true">

        <!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html -->
        <!--
        <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
        -->

        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern="common" -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" pattern="%h %l %u %t &quot;%r&quot; %s %b" prefix="localhost_access_log" suffix=".txt"/>

      </Host>
    </Engine>
  </Service>
</Server>
